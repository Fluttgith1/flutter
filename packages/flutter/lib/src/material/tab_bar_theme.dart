import 'dart:ui';

import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'tabs.dart';

/// Custom theme for [TabBar].
///
/// Used to customize the colors of the label, and the size/shape of the
/// indicator.
class TabBarTheme extends Diagnosticable {
  /// Creates a tab bar theme that overrides the defaults for the following
  /// values for any [TabBar] in the context.
  const TabBarTheme({
      this.isScrollable,
      this.indicator,
      this.indicatorSize,
      this.labelColor,
      this.unselectedLabelColor,
  });

  /// Default value for [TabBar.isScrollable] in this Theme.
  final bool isScrollable;

  /// Default value for [TabBar.indicator] in this Theme.
  final Decoration indicator;

  /// Default value for [TabBar.indicatorSize] in this Theme.
  final TabBarIndicatorSize indicatorSize;

  /// Default value for [TabBar.labelColor] in this Theme.
  final Color labelColor;

  /// Default value for [TabBar.unselectedLabelColor] in this Theme.
  final Color unselectedLabelColor;


  /// Linearly interpolate between two tab bar themes.
  ///
  /// The arguments must not be null.
  ///
  /// The `t` argument represents position on the timeline, with 0.0 meaning
  /// that the interpolation has not started, returning `a` (or something
  /// equivalent to `a`), 1.0 meaning that the interpolation has finished,
  /// returning `b` (or something equivalent to `b`), and values in between
  /// meaning that the interpolation is at the relevant point on the timeline
  /// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
  /// 1.0, so negative values and values greater than 1.0 are valid (and can
  /// easily be generated by curves such as [Curves.elasticInOut]).
  ///
  /// Values for `t` are usually obtained from an [Animation<double>], such as
  /// an [AnimationController].
  static TabBarTheme lerp(TabBarTheme a, TabBarTheme b, double t) {
    assert(a != null);
    assert(b != null);
    assert(t != null);
    return TabBarTheme(
      isScrollable: t < 0.5 ? a.isScrollable : b.isScrollable,
      indicator: Decoration.lerp(a.indicator, b.indicator, t),
      indicatorSize: t < 0.5 ? a.indicatorSize : b.indicatorSize,
      labelColor: Color.lerp(a.labelColor, b.labelColor, t),
      unselectedLabelColor: Color.lerp(a.unselectedLabelColor, b.unselectedLabelColor, t)
    );
  }
}
