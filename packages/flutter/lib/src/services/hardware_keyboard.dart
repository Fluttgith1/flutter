// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:async';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'package:flutter/foundation.dart';
import './keyboard_key.dart';

/// Defines the interface for keyboard key events.
///
/// The event provides an abstraction for the [physicalKey] and [logicalKey],
/// describing the physical location of the key, and the logical meaning of the
/// key, respectively. For [KeyDownEvent]s, the character produced by the event
/// (if any) is also included.
///
/// See also:
///
///  * [LogicalKeyboardKey], an object that describes the logical meaning of a
///    key.
///  * [PhysicalKeyboardKey], an object that describes the physical location of
///    a key.
///  * [KeyDownEvent], a subclass for events representing the user
///    pressing a key.
///  * [KeyUpEvent], a subclass for events representing the user
///    releasing a key.
///  * [KeySyncEvent], a subclass for events representing the user
///    pressing a key when Flutter doesn't have focus.
///  * [KeyCancelEvent], a subclass for events representing the user
///    releasing a key when Flutter doesn't have focus.
///  * [HardwareKeyboard], which can be listened to for key events.
///  * [HardwareKeyboardListener], a widget that listens for hardware key events.
@immutable
abstract class PhysicalKeyEvent with Diagnosticable {
  const PhysicalKeyEvent({required this.physicalKey});

  /// Returns an object representing the physical location of this key.
  ///
  /// {@template flutter.services.KeyEvent.physicalKey}
  /// The [PhysicalKeyboardKey] ignores the key map, modifier keys (like SHIFT),
  /// and the label on the key. It describes the location of the key as if it
  /// were on a QWERTY keyboard regardless of the keyboard mapping in effect.
  ///
  /// [PhysicalKeyboardKey]s are used to describe and test for keys in a
  /// particular location.
  ///
  /// For instance, if you wanted to make a game where the key to the right of
  /// the CAPS LOCK key made the player move left, you would be comparing the
  /// result of this `physicalKey` with [PhysicalKeyboardKey.keyA], since that
  /// is the key next to the CAPS LOCK key on a QWERTY keyboard. This would
  /// return the same thing even on a French keyboard where the key next to the
  /// CAPS LOCK produces a "Q" when pressed.
  ///
  /// If you want to make your app respond to a key with a particular character
  /// on it regardless of location of the key, use [KeyEvent.logicalKey] instead.
  /// {@endtemplate}
  ///
  /// See also:
  ///
  ///  * [logicalKey] for the non-location specific key generated by this event.
  ///  * [character] for the character generated by this keypress (if any).
  final PhysicalKeyboardKey physicalKey;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<PhysicalKeyboardKey>('physicalKey', physicalKey));
  }
}

/// An event indicating that the user has pressed a key down on the keyboard.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class PhysicalKeyDownEvent extends PhysicalKeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const PhysicalKeyDownEvent({
    required this.timestamp,
    required PhysicalKeyboardKey physicalKey,
  }) : super(physicalKey: physicalKey);

  /// Time of event, relative to an arbitrary start point.
  ///
  /// All events share the same timestamp origin.
  final Duration timestamp;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<Duration>('timestamp', timestamp));
  }
}

/// An event indicating that the user has released a key on the keyboard.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class PhysicalKeyUpEvent extends PhysicalKeyEvent {
  /// Creates a key event that represents the user releasing a key.
  const PhysicalKeyUpEvent({
    required this.timestamp,
    required PhysicalKeyboardKey physicalKey,
  }) : super(physicalKey: physicalKey);

  /// Time of event, relative to an arbitrary start point.
  ///
  /// All events share the same timestamp origin.
  final Duration timestamp;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<Duration>('timestamp', timestamp));
  }
}

/// The user has released a key on the keyboard after Flutter lost input focus.
///
/// This is effectively a key up event, but is generated because the application
/// lost focus before the key was released, and so the key up event was
/// delivered to another application, or dropped by the operating system.
///
/// The application is expected to update state related to this key event, but
/// not to trigger user actions as a result of the event.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class PhysicalKeyCancelEvent extends PhysicalKeyEvent {
  /// Creates a key event that represents the user releasing a key outside of
  /// the current focus.
  const PhysicalKeyCancelEvent({
    required PhysicalKeyboardKey physicalKey,
  }) : super(physicalKey: physicalKey);
}

/// The user has pressed a key on the keyboard before the current application
/// gained focus.
///
/// This is effectively a key down event, but is generated because the application
/// gained focus after the key was pressed, and so the key down was delivered to
/// another application.
///
/// The application is expected to update state related to this key event, but
/// not to trigger user actions as a result of the event.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class PhysicalKeySyncEvent extends PhysicalKeyEvent {
  /// Creates a key event that represents the user releasing a key outside of
  /// the current focus.
  const PhysicalKeySyncEvent({
    required PhysicalKeyboardKey physicalKey,
  }) : super(physicalKey: physicalKey);
}

@immutable
abstract class LogicalKeyEvent with Diagnosticable {
  const LogicalKeyEvent({required this.logicalKey, required this.physicalEvent});

  /// Returns an object representing the logical key that was pressed.
  ///
  /// {@template flutter.services.KeyEvent.logicalKey}
  /// This method takes into account the key map and modifier keys (like SHIFT)
  /// to determine which logical key to return.
  ///
  /// If you are looking for the character produced by a key event, use
  /// [KeyEvent.character] instead.
  ///
  /// If you are collecting text strings, use the [TextField] or
  /// [CupertinoTextField] widgets, since those automatically handle many of the
  /// complexities of managing keyboard input, like showing a soft keyboard or
  /// interacting with an input method editor (IME).
  /// {@endtemplate}
  final LogicalKeyboardKey logicalKey;

  final PhysicalKeyEvent physicalEvent;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<LogicalKeyboardKey>('logicalKey', logicalKey));
    properties.add(DiagnosticsProperty<PhysicalKeyEvent>('physicalEvent', physicalEvent, level: DiagnosticLevel.debug));
  }
}

class LogicalKeyDownEvent extends LogicalKeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const LogicalKeyDownEvent({
    required this.timestamp,
    required LogicalKeyboardKey logicalKey,
    required PhysicalKeyEvent physicalEvent,
    this.character,
  }) : super(logicalKey: logicalKey, physicalEvent: physicalEvent);

  /// Time of event, relative to an arbitrary start point.
  ///
  /// All events share the same timestamp origin.
  final Duration timestamp;

  /// Returns the Unicode character (grapheme cluster) completed by this
  /// keystroke, if any.
  ///
  /// This will only return a character if this keystroke, combined with any
  /// preceding keystroke(s), generated a character. It will return null if no
  /// character has been generated by the keystroke (e.g. a "dead" or
  /// "combining" key), or if the corresponding key is a key without a visual
  /// representation, such as a modifier key or a control key.
  ///
  /// This can return multiple Unicode code points, since some characters (more
  /// accurately referred to as grapheme clusters) are made up of more than one
  /// code point.
  ///
  /// The `character` doesn't take into account edits by an input method editor
  /// (IME). For composing text, use the [TextField] or [CupertinoTextField]
  /// widgets, since those automatically handle many of the complexities of
  /// managing keyboard input.
  ///
  /// Returns null if there is no character for this event.
  final String? character;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<Duration>('timestamp', timestamp));
    properties.add(StringProperty('character', character));
  }
}

class LogicalKeyUpEvent extends LogicalKeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const LogicalKeyUpEvent({
    required this.timestamp,
    required LogicalKeyboardKey logicalKey,
    required PhysicalKeyEvent physicalEvent,
  }) : super(logicalKey: logicalKey, physicalEvent: physicalEvent);

  /// Time of event, relative to an arbitrary start point.
  ///
  /// All events share the same timestamp origin.
  final Duration timestamp;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<Duration>('timestamp', timestamp));
  }
}

class LogicalKeySyncEvent extends LogicalKeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const LogicalKeySyncEvent({
    required LogicalKeyboardKey logicalKey,
    required PhysicalKeyEvent physicalEvent,
  }) : super(logicalKey: logicalKey, physicalEvent: physicalEvent);
}

class LogicalKeyCancelEvent extends LogicalKeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const LogicalKeyCancelEvent({
    required LogicalKeyboardKey logicalKey,
    required PhysicalKeyEvent physicalEvent,
  }) : super(logicalKey: logicalKey, physicalEvent: physicalEvent);
}

class HardwareKeyboard {
  HardwareKeyboard();

  void dispatchKeyData(ui.KeyData keyData) {
    print(keyData);
  }
}
