// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:collection' show LinkedList, LinkedListEntry;
import 'dart:async';
import 'dart:typed_data';
import 'dart:ui' as ui;

import 'package:flutter/foundation.dart';
import './keyboard_key.dart';

class KeyboardLocks {
  // This class only contains static members, and should not be instantiated or
  // extended.
  factory KeyboardLocks._() => throw Error();

  static const int capsLock = 0x1;

  static const int numLock = 0x2;

  static const int scrollLock = 0x4;
}

/// Defines the interface for keyboard key events.
///
/// The event provides an abstraction for the [physicalKey] and [logicalKey],
/// describing the physical location of the key, and the logical meaning of the
/// key, respectively. For [KeyDownEvent]s, the character produced by the event
/// (if any) is also included.
///
/// See also:
///
///  * [LogicalKeyboardKey], an object that describes the logical meaning of a
///    key.
///  * [KeyboardKey], an object that describes the physical location of
///    a key.
///  * [KeyDownEvent], a subclass for events representing the user
///    pressing a key.
///  * [KeyUpEvent], a subclass for events representing the user
///    releasing a key.
///  * [KeySyncEvent], a subclass for events representing the user
///    pressing a key when Flutter doesn't have focus.
///  * [KeyCancelEvent], a subclass for events representing the user
///    releasing a key when Flutter doesn't have focus.
///  * [HardwareKeyboard], which can be listened to for key events.
///  * [HardwareKeyboardListener], a widget that listens for hardware key events.
@immutable
abstract class KeyEvent with Diagnosticable {
  const KeyEvent({
    required this.physical,
    required this.logical,
    this.character,
    required this.timeStamp,
    this.synthesized = false,
  });

  /// Returns an object representing the physical location of this key.
  ///
  /// {@template flutter.services.KeyEvent.physicalKey}
  /// The [KeyboardKey] ignores the key map, modifier keys (like SHIFT),
  /// and the label on the key. It describes the location of the key as if it
  /// were on a QWERTY keyboard regardless of the keyboard mapping in effect.
  ///
  /// [KeyboardKey]s are used to describe and test for keys in a
  /// particular location.
  ///
  /// For instance, if you wanted to make a game where the key to the right of
  /// the CAPS LOCK key made the player move left, you would be comparing the
  /// result of this `physicalKey` with [KeyboardKey.keyA], since that
  /// is the key next to the CAPS LOCK key on a QWERTY keyboard. This would
  /// return the same thing even on a French keyboard where the key next to the
  /// CAPS LOCK produces a "Q" when pressed.
  ///
  /// If you want to make your app respond to a key with a particular character
  /// on it regardless of location of the key, use [KeyEvent.logicalKey] instead.
  /// {@endtemplate}
  ///
  /// See also:
  ///
  ///  * [logicalKey] for the non-location specific key generated by this event.
  ///  * [character] for the character generated by this keypress (if any).
  final PhysicalKeyboardKey physical;

  /// Returns an object representing the logical key that was pressed.
  ///
  /// {@template flutter.services.KeyEvent.logicalKey}
  /// This method takes into account the key map and modifier keys (like SHIFT)
  /// to determine which logical key to return.
  ///
  /// If you are looking for the character produced by a key event, use
  /// [KeyEvent.character] instead.
  ///
  /// If you are collecting text strings, use the [TextField] or
  /// [CupertinoTextField] widgets, since those automatically handle many of the
  /// complexities of managing keyboard input, like showing a soft keyboard or
  /// interacting with an input method editor (IME).
  /// {@endtemplate}
  final LogicalKeyboardKey logical;

  final String? character;

  /// Time of event, relative to an arbitrary start point.
  ///
  /// All events share the same timeStamp origin.
  final Duration timeStamp;

  final bool synthesized;

  @override
  void debugFillProperties(DiagnosticPropertiesBuilder properties) {
    super.debugFillProperties(properties);
    properties.add(DiagnosticsProperty<PhysicalKeyboardKey>('physical', physical));
    properties.add(DiagnosticsProperty<LogicalKeyboardKey>('logical', logical));
    properties.add(StringProperty('character', character));
    properties.add(DiagnosticsProperty<Duration>('timeStamp', timeStamp));
    properties.add(FlagProperty('synthesized', value: synthesized, ifTrue: 'synthesized'));
  }
}

/// An event indicating that the user has pressed a key down on the keyboard.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class KeyDownEvent extends KeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const KeyDownEvent({
    required PhysicalKeyboardKey physical,
    required LogicalKeyboardKey logical,
    String? character,
    required Duration timeStamp,
    bool synthesized = false,
  }) : super(
         physical: physical,
         logical: logical,
         character: character,
         timeStamp: timeStamp,
         synthesized: synthesized,
       );
}

/// An event indicating that the user has released a key on the keyboard.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class KeyUpEvent extends KeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const KeyUpEvent({
    required PhysicalKeyboardKey physical,
    required LogicalKeyboardKey logical,
    required Duration timeStamp,
    bool synthesized = false,
  }) : super(
         physical: physical,
         logical: logical,
         timeStamp: timeStamp,
         synthesized: synthesized,
       );
}

/// An event indicating that the user has been holding a key on the keyboard
/// and causing repeated events.
///
/// See also:
///
///  * [HardwareKeyboard], which produces this event.
class KeyRepeatEvent extends KeyEvent {
  /// Creates a key event that represents the user pressing a key.
  const KeyRepeatEvent({
    required PhysicalKeyboardKey physical,
    required LogicalKeyboardKey logical,
    String? character,
    required Duration timeStamp,
  }) : super(
         physical: physical,
         logical: logical,
         character: character,
         timeStamp: timeStamp,
       );
}

class _ListenerEntry<T> extends LinkedListEntry<_ListenerEntry<T>> {
  _ListenerEntry(this.listener);
  final ValueChanged<T> listener;
}

abstract class _ValueDispatcher<T> {
  LinkedList<_ListenerEntry<T>>? _listeners = LinkedList<_ListenerEntry<T>>();

  bool _debugAssertNotDisposed() {
    assert(() {
      if (_listeners == null) {
        throw FlutterError(
          'A $runtimeType was used after being disposed.\n'
          'Once you have called dispose() on a $runtimeType, it can no longer be used.'
        );
      }
      return true;
    }());
    return true;
  }

  /// Register a closure to be called when the object notifies its listeners.
  void addListener(ValueChanged<T> listener) {
    assert(_debugAssertNotDisposed());
    _listeners!.add(_ListenerEntry<T>(listener));
  }

  /// Remove a previously registered closure from the list of closures that the
  /// object notifies.
  void removeListener(ValueChanged<T> listener) {
    assert(_debugAssertNotDisposed());
    for (final _ListenerEntry<T> entry in _listeners!) {
      if (entry.listener == listener) {
        entry.unlink();
        return;
      }
    }
  }

  @mustCallSuper
  void dispose() {
    assert(_debugAssertNotDisposed());
    _listeners = null;
  }

  /// Call all the registered listeners.
  ///
  /// Call this method whenever the object changes, to notify any clients the
  /// object may have changed. Listeners that are added during this iteration
  /// will not be visited. Listeners that are removed during this iteration will
  /// not be visited after they are removed.
  ///
  /// Exceptions thrown by listeners will be caught and reported using
  /// [FlutterError.reportError].
  ///
  /// This method must not be called after [dispose] has been called.
  ///
  /// Surprising behavior can result when reentrantly removing a listener (i.e.
  /// in response to a notification) that has been registered multiple times.
  /// See the discussion at [removeListener].
  @protected
  @visibleForTesting
  void notifyListeners(T value) {
    assert(_debugAssertNotDisposed());
    if (_listeners!.isEmpty)
      return;

    final List<_ListenerEntry<T>> localListeners = List<_ListenerEntry<T>>.from(_listeners!);

    for (final _ListenerEntry<T> entry in localListeners) {
      try {
        if (entry.list != null)
          entry.listener(value);
      } catch (exception, stack) {
        FlutterError.reportError(FlutterErrorDetails(
          exception: exception,
          stack: stack,
          library: 'services library',
          context: ErrorDescription('while dispatching notifications for $runtimeType'),
          informationCollector: () sync* {
            yield DiagnosticsProperty<_ValueDispatcher<T>>(
              'The $runtimeType sending notification was',
              this,
              style: DiagnosticsTreeStyle.errorProperty,
            );
          },
        ));
      }
    }
  }
}

class HardwareKeyboard extends _ValueDispatcher<KeyEvent> {
  HardwareKeyboard();

  KeyEvent _eventFromData(ui.KeyData keyData) {
    final PhysicalKeyboardKey physicalKey = PhysicalKeyboardKey.findKeyByCode(keyData.physical)
        ?? PhysicalKeyboardKey(keyData.physical);
    final LogicalKeyboardKey logicalKey = LogicalKeyboardKey.findKeyByKeyId(keyData.logical)
        ?? LogicalKeyboardKey(keyData.logical);
    final Duration timeStamp = keyData.timeStamp;
    switch (keyData.change) {
      case ui.KeyChange.down:
        return KeyDownEvent(
          physical: physicalKey,
          logical: logicalKey,
          timeStamp: timeStamp,
          character: keyData.character,
          synthesized: keyData.synthesized,
        );
      case ui.KeyChange.up:
        return KeyUpEvent(
          physical: physicalKey,
          logical: logicalKey,
          timeStamp: timeStamp,
          synthesized: keyData.synthesized,
        );
      case ui.KeyChange.repeat:
        return KeyRepeatEvent(
          physical: physicalKey,
          logical: logicalKey,
          timeStamp: timeStamp,
          character: keyData.character,
        );
    }
  }

  void handleKeyData(ui.KeyData keyData) {
    _dispatchKeyEvent(_eventFromData(keyData));
  }

  void _dispatchKeyEvent(KeyEvent event) {
    notifyListeners(event);
  }
}
