import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';

import 'debug.dart';
import 'desktop_text_selection.dart';
import 'localizations.dart';
import 'text_selection_toolbar_button.dart';

// TODO(justinmc): Rename to text_selection_toolbar_button_builder? (and material)

/// A Function that builds a contextual menu given a list of its children
/// Widgets.
///
/// See also:
///
///   * [TextSelectionToolbarButtonBuilder], which receives this as a parameter.
typedef ContextualMenuFromChildrenBuilder = Widget Function(
  BuildContext context,
  List<Widget> children,
);

/// Calls [builder] with a list of Widgets generated by turning [buttonDatas]
/// into the default Cupertino buttons for the platform.
///
/// Does not build Material buttons. On non-Apple platforms, Cupertino-style
/// buttons will still be used, because the Cupertino library does not access
/// the Material library.
///
/// See also:
///
/// * [TextSelectionToolbarButtonsBuilder], which is in the Material library and
///   builds native-looking buttons for all platforms.
/// * [TextSelectionToolbarButtonDatasBuilder], which builds the
///   [ContextualMenuButtonData]s.
/// * [DefaultTextSelectionToolbar], which builds the toolbar itself.
class CupertinoTextSelectionToolbarButtonsBuilder extends StatelessWidget {
  /// Creates an instance of [CupertinoTextSelectionToolbarButtonsBuilder].
  const CupertinoTextSelectionToolbarButtonsBuilder({
    Key? key,
    required this.buttonDatas,
    required this.builder,
  }) : super(key: key);

  /// The information used to create each button Widget.
  final List<ContextualMenuButtonData> buttonDatas;

  /// Called with a List of Widgets created from the given [buttonDatas].
  ///
  /// Typically builds a text selection toolbar with the given Widgets as
  /// children.
  final ContextualMenuFromChildrenBuilder builder;

  @override
  Widget build(BuildContext context) {
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
      case TargetPlatform.iOS:
        assert(debugCheckHasCupertinoLocalizations(context));
        final CupertinoLocalizations localizations = CupertinoLocalizations.of(context);
        return builder(
          context,
          buttonDatas.map((ContextualMenuButtonData buttonData) {
            return CupertinoTextSelectionToolbarButton.text(
              onPressed: buttonData.onPressed,
              text: CupertinoTextSelectionToolbarButton.getButtonLabel(buttonData.type, localizations),
            );
          }).toList(),
        );
      case TargetPlatform.fuchsia:
      case TargetPlatform.linux:
      case TargetPlatform.windows:
      case TargetPlatform.macOS:
        assert(debugCheckHasCupertinoLocalizations(context));
        final CupertinoLocalizations localizations = CupertinoLocalizations.of(context);
        return builder(
          context,
          buttonDatas.map((ContextualMenuButtonData buttonData) {
            return CupertinoDesktopTextSelectionToolbarButton.text(
              context: context,
              onPressed: buttonData.onPressed,
              text: CupertinoTextSelectionToolbarButton.getButtonLabel(buttonData.type, localizations),
            );
          }).toList(),
        );
    }
  }
}
