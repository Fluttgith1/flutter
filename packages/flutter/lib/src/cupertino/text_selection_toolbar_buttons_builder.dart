// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';

import 'debug.dart';
import 'desktop_text_selection.dart';
import 'localizations.dart';
import 'text_selection_toolbar_button.dart';

/// A Function that builds a context menu given a list of its children Widgets.
///
/// See also:
///
///   * [CupertinoTextSelectionToolbarButtonsBuilder], which receives an
///     instance of this as a parameter.
typedef ContextMenuFromChildrenBuilder = Widget Function(
  BuildContext context,
  List<Widget> children,
);

/// Calls [builder] with a list of Widgets generated by turning [buttonDatas]
/// into the default Cupertino buttons for the platform.
///
/// Does not build Material buttons. On non-Apple platforms, Cupertino-style
/// buttons will still be used, because the Cupertino library does not access
/// the Material library.
///
/// See also:
///
/// * [TextSelectionToolbarButtonsBuilder], which is in the Material library and
///   builds native-looking buttons for all platforms.
/// * [TextSelectionToolbarButtonDatasBuilder], which builds the
///   [ContextMenuButtonData]s.
/// * [DefaultTextSelectionToolbar], which builds the toolbar itself.
class CupertinoTextSelectionToolbarButtonsBuilder extends StatelessWidget {
  /// Creates an instance of [CupertinoTextSelectionToolbarButtonsBuilder].
  const CupertinoTextSelectionToolbarButtonsBuilder({
    super.key,
    required this.buttonDatas,
    required this.builder,
  });

  /// The information used to create each button Widget.
  final List<ContextMenuButtonData> buttonDatas;

  /// Called with a List of Widgets created from the given [buttonDatas].
  ///
  /// Typically builds a text selection toolbar with the given Widgets as
  /// children.
  final ContextMenuFromChildrenBuilder builder;

  /// Returns the default button label String for the button of the given
  /// [ContextMenuButtonType].
  static String _getButtonLabel(ContextMenuButtonData buttonData, CupertinoLocalizations localizations) {
    if (buttonData.label != null) {
      return buttonData.label!;
    }

    switch (buttonData.type) {
      case ContextMenuButtonType.cut:
        return localizations.cutButtonLabel;
      case ContextMenuButtonType.copy:
        return localizations.copyButtonLabel;
      case ContextMenuButtonType.paste:
        return localizations.pasteButtonLabel;
      case ContextMenuButtonType.selectAll:
        return localizations.selectAllButtonLabel;
      case ContextMenuButtonType.custom:
        return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
      case TargetPlatform.iOS:
        assert(debugCheckHasCupertinoLocalizations(context));
        final CupertinoLocalizations localizations = CupertinoLocalizations.of(context);
        return builder(
          context,
          buttonDatas.map((ContextMenuButtonData buttonData) {
            return CupertinoTextSelectionToolbarButton.text(
              onPressed: buttonData.onPressed,
              text: _getButtonLabel(buttonData, localizations),
            );
          }).toList(),
        );
      case TargetPlatform.fuchsia:
      case TargetPlatform.linux:
      case TargetPlatform.windows:
      case TargetPlatform.macOS:
        assert(debugCheckHasCupertinoLocalizations(context));
        final CupertinoLocalizations localizations = CupertinoLocalizations.of(context);
        return builder(
          context,
          buttonDatas.map((ContextMenuButtonData buttonData) {
            return CupertinoDesktopTextSelectionToolbarButton.text(
              context: context,
              onPressed: buttonData.onPressed,
              text: _getButtonLabel(buttonData, localizations),
            );
          }).toList(),
        );
    }
  }
}
