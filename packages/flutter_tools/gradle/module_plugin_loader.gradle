// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is included from `<module>/.android/include_flutter.groovy`,
// so it can be versioned with the Flutter SDK.

import groovy.json.JsonSlurper

def moduleProjectRoot = project(':flutter').projectDir.parentFile.parentFile

// Note: if this logic is changed, also change the logic in app_plugin_loader.gradle.
def pluginsFile = new File(moduleProjectRoot, '.flutter-plugins-dependencies')
List<String> pluginsNames = new ArrayList<>()
if (pluginsFile.exists()) {
    def object = new JsonSlurper().parseText(pluginsFile.text)
    assert object instanceof Map
    assert object.plugins instanceof Map
    assert object.plugins.android instanceof List
    // Includes the Flutter plugins that support the Android platform.
    object.plugins.android.each { androidPlugin ->
        assert androidPlugin.name instanceof String
        assert androidPlugin.path instanceof String
        // save plugin's name for modifying it's buildDir location. see issue #92252 for detail.
        pluginsNames.add(androidPlugin.name)
        // Skip plugins that have no native build (such as a Dart-only
        // implementation of a federated plugin).
        def needsBuild = androidPlugin.containsKey('native_build') ? androidPlugin['native_build'] : true
        if (!needsBuild) {
            return
        }
        def pluginDirectory = new File(androidPlugin.path, 'android')
        assert pluginDirectory.exists()
        include ":${androidPlugin.name}"
        project(":${androidPlugin.name}").projectDir = pluginDirectory
    }
}

gradle.getGradle().projectsLoaded { g ->
    g.rootProject.beforeEvaluate { p ->
        //let the plugin's output generated in flutterModule/build/host/${androidPlugin.name}.
        p.subprojects { sp ->
            if (pluginsNames.contains(sp.name.replace(":", ""))){
                File androidPluginBuildOutputDir = new File(moduleProjectRoot.getAbsolutePath() + File.separator + "build" + File.separator + "host" + File.separator + sp.name.replace(":", ""));
                if (!androidPluginBuildOutputDir.exists()){
                    //make dir if not exist.
                    androidPluginBuildOutputDir.mkdirs()
                }
                // only the project object here can modify the `buildDir`.
                // {@see https://github.com/flutter/flutter/pull/94645/files/7c77d3653709ccd1e2b45268b209f00f36d8470d#r819224682}
                sp.buildDir = androidPluginBuildOutputDir
            }
        }
        def _mainModuleName = binding.variables['mainModuleName']
        if (_mainModuleName != null && !_mainModuleName.empty) {
            p.ext.mainModuleName = _mainModuleName
        }
    }
    g.rootProject.afterEvaluate { p ->
        p.subprojects { sp ->
            if (sp.name != 'flutter') {
                sp.evaluationDependsOn(':flutter')
            }
        }
    }
}
