// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import '../convert.dart';
import 'config.dart';
import 'context.dart';
import 'io.dart';
import 'utils.dart';

// The backend url where we fetch the latest announcement from.
const String _kBackendUrlLatest = 'TODO-TEST-URL';

/// The name of the config setting to mute flutter announcements.
const String kFlutterAnnounceConfig = 'mute-flutter-announce';

/// The id of the last seen announcement.
const String kLastAnnounceId = 'last-announcement';

/// The [AnnouncementService] instance.
AnnouncementService get announcementService => context.get<AnnouncementService>() ?? const AnnouncementService();

/// A service for interaction with flutter announcements.
class AnnouncementService {
  const AnnouncementService();

  /// Whether the announcement service can display announcements.
  bool get announcementsEnabled => false;

  /// Fetch the latest announcement.
  ///
  /// May return `null` to signal that there are no announcements, or that the
  /// latest announcement has already been seen by this client.
  Future<Announcement> fetchLatestAnnouncement() => null;
}

/// An implementation of the announcement service for the command line tool.
class FlutterAnnouncementService implements AnnouncementService {
  const FlutterAnnouncementService();

  static final HttpClient _client = HttpClient();

  @override
  Future<Announcement> fetchLatestAnnouncement() async {
    final String lastAnnouncementId = Config.instance.getValue(kLastAnnounceId);
    try {
      final HttpClientRequest request = await _client.getUrl(Uri.parse(_kBackendUrlLatest));
      final HttpClientResponse response = await request.close();
      if (response.statusCode != HttpStatus.ok) {
        return null;
      }
      final String body = await response
        .cast<List<int>>()
        .transform<String>(utf8.decoder)
        .join('');
      final Announcement announcement = Announcement.fromJson(json.decode(body));
      if (announcement.id == lastAnnouncementId) {
        return null;
      }
      Config.instance.setValue(kLastAnnounceId, announcement.id);
      return announcement;
    } catch (err) {
      return null;
    }
  }

  // Display announcements if we are not muted and not on a bot.
  @override
  bool get announcementsEnabled {
    if (isRunningOnBot) {
      return false;
    }
    final bool isMuted = Config.instance.getValue(kFlutterAnnounceConfig);
    if (isMuted == true) {
      return false;
    }
    return true;
  }
}

/// A deserialized announcement.
class Announcement {
  const Announcement({
    this.id,
    this.message,
    this.link,
  });

  /// Create an [Announcement] from a JSON blob.
  factory Announcement.fromJson(Map<String, Object> json) {
    final String id = json['id'];
    final String message = json['message'];
    final String link = json['link'];
    return Announcement(
      id: id,
      message: message,
      link: link,
    );
  }

  /// A unique identifier generated by a backend implementation.
  final String id;

  /// The contents of the announcement displayed to the user.
  final String message;

  /// A canonical link to an offical forum or article.
  ///
  /// This field is optional, and may be `null`.
  final String link;
}
