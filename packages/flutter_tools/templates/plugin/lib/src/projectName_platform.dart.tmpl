import 'dart:async';

import 'package:plugin_platform_interface/plugin_platform_interface.dart';

import 'method_channel_{{projectName}}.dart';

/// The interface that implementations of image_picker must implement.
///
/// Platform implementations should extend this class rather than implement it.
class {{pluginDartClass}}Platform extends PlatformInterface {

  /// This constructor registers a unique token for this {{pluginDartClass}}Platform,
  /// to enforce instances to extend this class, rather than implement it.
  {{pluginDartClass}}Platform() : super(token: _token);

  static final Object _token = Object();

  static {{pluginDartClass}}Platform _instance = MethodChannel{{pluginDartClass}}();

  /// The default instance of [{{pluginDartClass}}Platform] to use.
  ///
  /// Defaults to [MethodChannel{{pluginDartClass}}].
  static {{pluginDartClass}}Platform get instance => _instance;

  /// Platform-specific plugins should set this with their own platform-specific
  /// class that extends [{{pluginDartClass}}Platform] when they register themselves.
  static set instance({{pluginDartClass}}Platform instance) {
    PlatformInterface.verifyToken(instance, _token);
    _instance = instance;
  }

  // Methods that platforms must implement to provide native functionality follow...

  /// Returns a [String] containing the version of the platform.
  Future<String> getPlatformVersion() {
    throw UnimplementedError('getPlatformVersion() is not implemented.');
  }
}
