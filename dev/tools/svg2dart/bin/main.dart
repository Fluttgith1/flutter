import 'dart:io';

import 'package:args/args.dart';
import 'package:svg2dart/svg2dart.dart';

const String kCodegenComment =
  '// AUTO GENERATED FILE DO NOT EDIT!\n'
  '// This file was generated by svg2dart.\n';

void main(List<String> args) {
  final ArgParser parser = new ArgParser();

  parser.addFlag(
      'help',
      abbr: 'h',
      negatable: false,
      help: 'Display the tool\'s usage instructions and quit.');

  parser.addOption(
      'output',
      abbr: 'o',
      help: 'Target path to write the generated Dart file to.');

  parser.addOption(
      'asset_name',
      abbr: 'n',
      help: 'Name to be used for the the generated const.');

  parser.addOption(
      'part_of',
      abbr: 'p',
      help: 'Library name to add a dart \'part of\' clause for');

  parser.addOption(
      'header',
      abbr: 'd',
      help: 'The contents of this file will be prepended to the beginning of '
            'the generated Dart file, this can be used for a license comment'
  );

  parser.addFlag(
      'codegen_comment',
      abbr: 'c',
      defaultsTo: true,
      help: 'Include the following comment after the header:\n$kCodegenComment'
  );

  final ArgResults argResults = parser.parse(args);

  if (argResults['help']
    || !argResults.wasParsed('output')
    || !argResults.wasParsed('asset_name')
    || argResults.rest.isEmpty
  ) {
    printUsage(parser);
    return;
  }

  final List<FrameData> frames = <FrameData>[];
  for (String filePath in argResults.rest) {
    final FrameData data = interpretSvg(filePath);
    frames.add(data);
  }

  String generatedDart = '';

  if (argResults.wasParsed('header')) {
    generatedDart += new File(argResults['header']).readAsStringSync();
    generatedDart += '\n';
  }

  if (argResults['codegen_comment'])
    generatedDart += kCodegenComment;

  if (argResults.wasParsed('part_of'))
    generatedDart += 'part of ${argResults['part_of']};\n';

  final Animation animation = new Animation.fromFrameData(frames);
  generatedDart += animation.toDart('_AnimatedIconData', argResults['asset_name']);

  final File outFile = new File(argResults['output']);
  outFile.writeAsStringSync(generatedDart);
}

void printUsage(ArgParser parser) {
  print('Usage: svg2dart --asset_name=<asset_name> --output=<output_path> <frames_list>');
  print('\nExample: svg2dart --asset_name=_\$menu_arrow --output=lib/data/menu_arrow.g.dart assets/svg/menu_arrow/*.svg\n');
  print(parser.usage);
}
