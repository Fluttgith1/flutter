// Copyright 2014 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:convert';
import 'dart:io' as io;

import 'package:process/process.dart';

import 'git.dart';
import 'globals.dart';
import 'repository.dart';

// git push https://<GITHUB_ACCESS_TOKEN>@github.com/<GITHUB_USERNAME>/<REPOSITORY_NAME>.git HEAD:$REMOTE_BRANCH_NAME

class PackageAutoroller {
  PackageAutoroller({
    required this.githubClient,
    required this.token,
    required this.framework,
    required this.orgName,
    required this.processManager,
  }) {
    if (token.trim().isEmpty) {
      throw Exception('empty token!');
    }
    if (githubClient.trim().isEmpty) {
      throw Exception('Must provide path to GitHub client!');
    }
    if (orgName.trim().isEmpty) {
      throw Exception('Must provide an orgName!');
    }
  }

  final FrameworkRepository framework;
  final ProcessManager processManager;

  /// Path to GitHub CLI client.
  final String githubClient;

  /// GitHub API access token.
  final String token;

  static const String hostname = 'github.com';

  static const String prBody = '''
This PR was generated by `flutter update-packages --force-upgrade`.
''';

  late final Future<String> featureBranchname = (() async {
    final List<String> remoteBranches = await framework.listRemoteBranches(framework.mirrorRemote!.name);

    int x = 1;
    String name(int index) => 'packages-autoroller-branch-$index';

    while (remoteBranches.contains(name(x))) {
      x += 1;
    }

    return name(x);
  })();

  /// Name of the GitHub organization to push the feature branch to.
  final String orgName;

  Future<void> roll() async {
    await authLogout(); // TODO delete
    await authLogin();
    await updatePackages(verbose: false); // TODO make true
    await pushBranch();
    await createPr(
      repository: await framework.checkoutDirectory,
    );
    await authLogout();
  }

  Future<void> updatePackages({
    required bool verbose,
    String author = 'flutter-packages-autoroller <flutter-packages-autoroller@google.com>'
  }) async {
    await framework.newBranch(await featureBranchname);
    final io.Process flutterProcess = await framework.streamFlutter(<String>[
      if (verbose) '--verbose',
      'update-packages',
      '--force-upgrade',
    ]);
    final int exitCode = await flutterProcess.exitCode;
    if (exitCode != 0) {
      throw ConductorException('Failed to update packages with exit code $exitCode');
    }
    await framework.commit(
      'roll packages',
      addFirst: true,
      author: author,
    );
  }

  Future<void> pushBranch() async {
    await framework.pushRef(
      fromRef: await featureBranchname,
      toRef: await featureBranchname,
      remote: framework.mirrorRemote!.url,
    );
  }

  Future<void> authLogout() {
    return cli(
      <String>['auth', 'logout', '--hostname', hostname],
      allowFailure: true,
    );
  }

  Future<void> authLogin() {
    return cli(
      <String>[
        'auth',
        'login',
        '--hostname',
        hostname,
        '--git-protocol',
        'https',
        '--with-token',
      ],
      stdin: token,
    );
  }

  /// Create a pull request on GitHub.
  ///
  /// When the current branch isn't fully pushed to a git remote, a prompt will ask where
  /// to push the branch and offer an option to fork the base repository. Use `--head` to
  /// explicitly skip any forking or pushing behavior.
  ///
  /// A prompt will also ask for the title and the body of the pull request. Use `--title`
  /// and `--body` to skip this, or use `--fill` to autofill these values from git commits.
  ///
  /// Link an issue to the pull request by referencing the issue in the body of the pull
  /// request. If the body text mentions `Fixes #123` or `Closes #123`, the referenced issue
  /// will automatically get closed when the pull request gets merged.
  ///
  /// By default, users with write access to the base repository can push new commits to the
  /// head branch of the pull request. Disable this with `--no-maintainer-edit`.
  ///
  ///
  /// USAGE
  ///   gh pr create [flags]
  ///
  /// FLAGS
  ///   -a, --assignee login       Assign people by their login. Use "@me" to self-assign.
  ///   -B, --base branch          The branch into which you want your code merged
  ///   -b, --body string          Body for the pull request
  ///   -F, --body-file file       Read body text from file
  ///   -d, --draft                Mark pull request as a draft
  ///   -f, --fill                 Do not prompt for title/body and just use commit info
  ///   -H, --head branch          The branch that contains commits for your pull request (default: current branch)
  ///   -l, --label name           Add labels by name
  ///   -m, --milestone name       Add the pull request to a milestone by name
  ///       --no-maintainer-edit   Disable maintainer's ability to modify pull request
  ///   -p, --project name         Add the pull request to projects by name
  ///       --recover string       Recover input from a failed run of create
  ///   -r, --reviewer handle      Request reviews from people or teams by their handle
  ///   -t, --title string         Title for the pull request
  ///   -w, --web                  Open the web browser to create a pull request
  ///
  /// INHERITED FLAGS
  ///       --help                     Show help for command
  ///   -R, --repo [HOST/]OWNER/REPO   Select another repository using the [HOST/]OWNER/REPO format
  ///
  /// EXAMPLES
  ///   $ gh pr create --title "The bug is fixed" --body "Everything works again"
  ///   $ gh pr create --reviewer monalisa,hubot  --reviewer myorg/team-name
  ///   $ gh pr create --project "Roadmap"
  ///   $ gh pr create --base develop --head monalisa:feature
  Future<void> createPr({
    required io.Directory repository,
    String title = '[flutter_tools] Auto-roll pub packages',
    String body = 'This PR was generated by `flutter update-packages --force-upgrade`.',
    String base = FrameworkRepository.defaultBranch,
    bool draft = false,
  }) async {
    // We will wrap title and body in double quotes before delegating to gh
    // binary
    await cli(
      <String>[
        'pr',
        'create',
        '--title',
        title.trim(),
        '--body',
        body.trim(),
        '--head',
        '$orgName:${await featureBranchname}',
        '--base',
        base,
        if (draft)
          '--draft',
      ],
      workingDirectory: repository.path,
    );
  }

  Future<void> help([List<String>? args]) {
    return cli(<String>[
      'help',
      ...?args,
    ]);
  }

  Future<void> cli(
    List<String> args, {
    bool allowFailure = false,
    String? stdin,
    String? workingDirectory,
  }) async {
    print('Executing "$githubClient ${args.join(' ')}" in $workingDirectory');
    final io.Process process = await processManager.start(
      <String>[githubClient, ...args],
      workingDirectory: workingDirectory,
      environment: <String, String>{},
    );
    final List<String> stderrStrings = <String>[];
    final List<String> stdoutStrings = <String>[];
    final Future<void> stdoutFuture = process.stdout
        .transform(utf8.decoder)
        .forEach(stdoutStrings.add);
    final Future<void> stderrFuture = process.stderr
        .transform(utf8.decoder)
        .forEach(stderrStrings.add);
    if (stdin != null) {
      process.stdin.write(stdin);
      await process.stdin.flush();
      await process.stdin.close();
    }
    final int exitCode = await process.exitCode;
    await Future.wait(<Future<Object?>>[
      stdoutFuture,
      stderrFuture,
    ]);
    final String stderr = stderrStrings.join();
    final String stdout = stdoutStrings.join();
    if (!allowFailure && exitCode != 0) {
      throw GitException(
        '$stderr\n$stdout',
        args,
      );
    }
    print(stdout);
  }

  //String get binPath {
  //  return 'gh';
  //  final List<String> segments = Platform.script.pathSegments;
  //  final Iterable<String> parentSegments = segments.take(segments.length - 1);
  //  return <String>[
  //    '', // add empty string so the joined string has a leading separator
  //    ...parentSegments,
  //    'bin',
  //    'gh',
  //  ].join(Platform.pathSeparator);
  //}
}
