# Copyright 2023 The Flutter Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

name: cherrypick

on:
  pull_request:
    branches: master
    types: [labeled]

permissions: write-all

jobs:
  cp_beta:
    name: cp_beta
    runs-on: ubuntu-latest
    # https://github.com/actions/runner/issues/1019
    # Note: don't add ${{ }} to the if statement below. For some reasons it causes the booleans to be evaluated incorrectly.
    if: |
      github.event.label.name == format('cp{0} merge-to-beta', ':') &&
      (github.event.pull_request.merged == true)
    steps:
      - name: Checkout Flutter Beta
        uses: actions/checkout@v4
        with:
          ref: beta
          repository: flutter/flutter
          token: ${{ github.token }}
      - name: Read Beta Candidate Name
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./bin/internal/release-candidate-branch.version
      # https://stackoverflow.com/questions/57968497
      # Doesn't work with nektos/act, but works on real github workflows.
      - name: Set Beta Branch
        run: |
          echo "BETA_BRANCH=${{ steps.version.outputs.content }}" >> $GITHUB_ENV
      - name: Trim Ending newline
        run: |
          echo "BETA_BRANCH=$(echo $BETA_BRANCH | tr -d '\n')" >> $GITHUB_ENV
      # Use jq to get approvers. The requested_reviewer field in pull_request event payload doesn't include approvers.
      # See https://api.github.com/repos/flutter/flutter/pulls/136842 as an example.
      # When multiple approvers, take the first one. e.g. flutter/flutter#136658.
      - name: Get Approver
        run: |
          RAW_APPROVERS=$(gh pr view --json reviews -q ".reviews[] | select(.state == \"APPROVED\") | .author.login" -R flutter/flutter $PR_NUMBER --comments)
          APPROVERS=($RAW_APPROVERS)
          echo "APPROVER=${APPROVERS[0]}" >> $GITHUB_ENV
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_TOKEN: ${{ github.token }}
      # Note: Do not use GITHUB_SHA variable. GITHUB_SHA gets overriden in latter steps.
      - name: Store Merged Sha
        run: |
          echo "MERGED_SHA=$PR_SHA" >> $GITHUB_ENV
        env:
          PR_SHA: ${{ github.event.pull_request.merge_commit_sha }}
      # Multi line string doesn't work. Concatenate string in variable instead.
      - name: Create cp body template
        run : |
          CP_TEMPLATE="**What is this PR?**<br>"
          CP_TEMPLATE+="This is a pull request that cherry picks ${MERGED_SHA} into the beta release branch.<br><br>"
          CP_TEMPLATE+="**Why this PR?**<br>"
          CP_TEMPLATE+="The label 'cp: merge-to-beta' was added to the initial PR.<br><br>"
          CP_TEMPLATE+="**Have Questions?**<br>"
          CP_TEMPLATE+="Open an issue for team-release, or ping @flutter-release-eng. cc @XilaiZhang @itsjustkevin<br><br>"
          echo "CP_TEMPLATE=${CP_TEMPLATE}" >> $GITHUB_ENV
      - name: Create cp template when merge conflict
        run : |
          CP_WARNING="**Note: There was an error when cherry picking the intial pull request**<br>"
          CP_WARNING+="**This is a forced cherry pick. This PR is generated by accepting theirs (the content in cp).**<br>"
          CP_WARNING+="**If this PR doesn't look right, please manually resolve the conflicts.**<br><br>"
          CP_WARNING="${CP_TEMPLATE}${CP_WARNING}"
          echo "CP_WARNING=${CP_WARNING}" >> $GITHUB_ENV
      - name: Print Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "Beta branch is ${BETA_BRANCH}"
          echo "Approver is ${APPROVER}"
          echo "Merged sha to be cherry picked is ${MERGED_SHA}"
          echo "CP pull request template is ${CP_TEMPLATE}"
          echo "Github context and event payload are $GITHUB_CONTEXT"
      - name: Checkout Flutter master
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: master
          repository: flutter/flutter
          token: ${{ github.token }}
      # note: Need a space between @ mentions and username.
      - name: Cherrypick
        id: regular-cp
        run: |
          git --version
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git checkout -b cp-${MERGED_SHA} --track origin/${BETA_BRANCH}
          echo "head sha is $(git rev-parse cp-$MERGED_SHA)"
          git cherry-pick ${MERGED_SHA}
          git status
          git push -u origin cp-${MERGED_SHA}
          gh pr create --title "[cp-beta]${PR_TITLE}" --reviewer ${APPROVER} --body "${CP_TEMPLATE}" --base ${BETA_BRANCH}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_TITLE: ${{ github.event.pull_request.title }}
      # Force a cherry pick by accepting theirs( the cp ) if there is a merge conflict. Inform author in pr description.
      # use ${BRANCH} instead of origin/${BRANCH} for base ref.
      - name: Force Cherrypick
        if: ${{ failure() }}
        run: |
          git cherry-pick --abort
          git checkout master
          git checkout -b cp-${MERGED_SHA}-force --track origin/${BETA_BRANCH}
          echo "head sha is $(git rev-parse cp-$MERGED_SHA-force)"
          git cherry-pick -Xtheirs ${MERGED_SHA}
          git status
          git push -u origin cp-${MERGED_SHA}-force
          gh pr create --title "[force][cp-beta]${PR_TITLE}" --reviewer ${APPROVER} --body "${CP_WARNING}" --base ${BETA_BRANCH}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_TITLE: ${{ github.event.pull_request.title }}
